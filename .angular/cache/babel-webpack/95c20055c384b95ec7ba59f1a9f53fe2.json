{"ast":null,"code":"import { ReplaySubject } from 'rxjs';\nimport { fromPairs, map } from 'lodash-es';\nimport * as extractedTailwindConfigStyle from '@fuse/styles/core/tailwind-config.scss';\nimport * as i0 from \"@angular/core\";\nexport let FuseTailwindService = /*#__PURE__*/(() => {\n  class FuseTailwindService {\n    /**\r\n     * Constructor\r\n     */\n    constructor() {\n      this._tailwindConfig = new ReplaySubject(1); // Prepare the config object\n\n      const config = {}; // Extract the style from the class\n\n      const regexpForClass = /\\.fuse-tailwind-extracted-config\\s\\{([\\s\\S]*)\\}/g;\n      const style = regexpForClass.exec(extractedTailwindConfigStyle.default)[1].trim(); // Extract the rules\n\n      const regexp = /(--[\\s\\S]*?):'([\\s\\S]*?)';/g;\n      let rules = regexp.exec(style); // Add to the config\n\n      while (rules !== null) {\n        const configGroup = /--([\\s\\S]*?)-/g.exec(rules[1])[1];\n\n        if (!config[configGroup]) {\n          config[configGroup] = {};\n        }\n\n        config[configGroup][rules[1].replace(/(--[\\s\\S]*?-)/g, '')] = rules[2];\n        rules = regexp.exec(style);\n      } // Parse the themes objects\n\n\n      config.themes = fromPairs(map(config.themes, (value, key) => [key, JSON.parse(value)])); // Execute the observable with the config\n\n      this._tailwindConfig.next(config);\n    } // -----------------------------------------------------------------------------------------------------\n    // @ Accessors\n    // -----------------------------------------------------------------------------------------------------\n\n    /**\r\n     * Getter for _tailwindConfig\r\n     */\n\n\n    get tailwindConfig$() {\n      return this._tailwindConfig.asObservable();\n    }\n\n  }\n\n  FuseTailwindService.ɵfac = function FuseTailwindService_Factory(t) {\n    return new (t || FuseTailwindService)();\n  };\n\n  FuseTailwindService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FuseTailwindService,\n    factory: FuseTailwindService.ɵfac\n  });\n  return FuseTailwindService;\n})();","map":null,"metadata":{},"sourceType":"module"}