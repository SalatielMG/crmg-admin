{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport let FormControlService = /*#__PURE__*/(() => {\n  class FormControlService {\n    constructor() {\n      this.getErrors = formControl => {\n        if (!formControl) return [];\n\n        if (formControl.errors != null && formControl.invalid) {\n          return this.hasError(formControl);\n        }\n\n        return [];\n      };\n    }\n\n    hasError(control) {\n      let error = [];\n\n      if (control.hasError('required')) {\n        error.push('El campo es requerido');\n      } else if (control.hasError('email')) {\n        error.push('Porfavor ingrese un email valido');\n      } else if (control.hasError('noConfirmNewPassword')) {\n        error.push('Las contraseñas no coinciden');\n      } else if (control.hasError('noSelectOption')) {\n        error.push(control.errors.msj);\n      } else if (control.hasError('noMultipleSelectOption')) {\n        error.push(control.errors.msj);\n      } else if (control.hasError('overflowMaxValue')) {\n        error.push(control.errors.msj);\n      } else if (control.hasError('noConfirmNewValue')) {\n        error.push(control.errors.msj);\n      } else if (control.hasError('noFormatOptionAnswer')) {\n        error.push(control.errors.msj);\n      } else if (control.hasError('errorSelectTopicsGroup')) {\n        error.push(control.errors.msj);\n      } else if (control.hasError('errorValidateDate')) {\n        error.push(control.errors.msj);\n      } else if (control.hasError('errorValidateTime')) {\n        error.push(control.errors.msj);\n      } else if (control.hasError('email')) {\n        error.push('Ingrese un email valido');\n      } else if (control.hasError('minlength')) {\n        error.push(`Longitud mínima de ${control.getError('minlength').requiredLength} caracteres`);\n      } else if (control.hasError('maxlength')) {\n        error.push(`Longitud máxima de ${control.getError('maxlength').requiredLength} caracteres`);\n      } else if (control.hasError('min')) {\n        error.push(`Valor númerico mínimo de ${control.getError('min').min}`);\n      } else if (control.hasError('max')) {\n        error.push(`Valor númerico maximo de ${control.getError('max').max}`);\n      } else if (control.hasError('pattern')) {\n        error.push(this.hasErrorPattern(control.getError('pattern').requiredPattern).toString());\n      }\n\n      return error;\n    }\n\n    hasErrorPattern(pattern) {\n      return 'Formato no valido'; // let msj = '';\n      // switch (pattern) {\n      //     case `^${this.regexPassword}$`:\n      //         return 'Contraseña mínima de 8 caracteres, al menos una letra, un número y un carácter especial';\n      //     case `${REGEX.DATE}`:\n      //         return 'Formato de Fecha invalida';\n      //     case `${REGEX.TIME}`:\n      //         return 'Formato de Hora invalida';\n      //     default:\n      //         const p = pattern.split(',');\n      //         const min: number = Number(p[0][p[0].length - 1]);\n      //         const max: number = Number(p[1][0]);\n      //         msj = `Longitud maxima ${max} de caracteres`;\n      //         // console.log('min', min);\n      //         if (min > 1 && min !== max) {\n      //             msj = `Longitud minima de ${min} y maxima de ${max} caracteres`;\n      //         } else {\n      //             msj = `Longitud minima y maxima de ${min} caracteres`;\n      //         }\n      //         return msj;\n      // }\n    }\n\n  }\n\n  FormControlService.ɵfac = function FormControlService_Factory(t) {\n    return new (t || FormControlService)();\n  };\n\n  FormControlService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FormControlService,\n    factory: FormControlService.ɵfac,\n    providedIn: 'root'\n  });\n  return FormControlService;\n})();","map":null,"metadata":{},"sourceType":"module"}